{"version":3,"sources":["main.js"],"names":["document","addEventListener","passwordForm","getElementById","formContainer","initialPasswordHash","localStorage","getItem","setItem","hashPassword","password","hash","sha3_256","checkPassword","hashedPassword","storedHash","showEventForm","eventForm","createElement","id","innerHTML","appendChild","event","preventDefault","eventName","target","value","eventDate","eventTime","eventData","currentEvents","JSON","parse","push","stringify","eventList","listItem","textContent","loadEventList","storedEvents","forEach","isCorrectPassword","alert"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const passwordForm = document.getElementById('passwordForm');\r\n    const formContainer = document.getElementById('formContainer');\r\n    const initialPasswordHash = 'a794e600d504779d87143f73a48aa0f9553c3c3e2b9acdbb17a4ea4ff4c4f01f';\r\n    // Store the hashed password in localStorage if it doesn't exist\r\n    if (!localStorage.getItem('passwordHash')) {\r\n        localStorage.setItem('passwordHash', initialPasswordHash);\r\n    }\r\n\r\n    // Hash the input password using SHA-3\r\n    const hashPassword = async (password) => {\r\n        const hash = sha3_256(password);\r\n        return hash;\r\n    };\r\n\r\n    // Check if the hashed input password matches the stored password hash\r\n    const checkPassword = async (password) => {\r\n        const hashedPassword = await hashPassword(password);\r\n        const storedHash = localStorage.getItem('passwordHash');\r\n        return hashedPassword === storedHash;\r\n    };\r\n\r\n    // Replace the password form with the event form\r\n    const showEventForm = () => {\r\n        const eventForm = document.createElement('form');\r\n        eventForm.id = 'eventForm';\r\n        eventForm.innerHTML = `\r\n            <label for=\"eventName\">Event name:</label>\r\n            <input type=\"text\" id=\"eventName\" name=\"eventName\" required>\r\n            <br>\r\n            <label for=\"eventDate\">Event date:</label>\r\n            <input type=\"date\" id=\"eventDate\" name=\"eventDate\" required>\r\n            <br>\r\n            <label for=\"eventTime\">Event time:</label>\r\n            <input type=\"time\" id=\"eventTime\" name=\"eventTime\" required>\r\n            <br><br>\r\n            <button type=\"submit\">Create event</button>\r\n        `;\r\n        formContainer.innerHTML = '';\r\n        formContainer.appendChild(eventForm);\r\n\r\n        // Handle the event form submission\r\n        eventForm.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n\r\n            const eventName = event.target.eventName.value;\r\n            const eventDate = event.target.eventDate.value;\r\n            const eventTime = event.target.eventTime.value;\r\n\r\n            const eventData = {\r\n                eventName,\r\n                eventDate,\r\n                eventTime,\r\n            };\r\n\r\n            // Store the event data in localStorage\r\n            const currentEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n            currentEvents.push(eventData);\r\n            localStorage.setItem('events', JSON.stringify(currentEvents));\r\n\r\n            // Display the event in the list\r\n            const eventList = document.getElementById('eventList');\r\n            const listItem = document.createElement('li');\r\n            listItem.textContent = `Event Name: ${eventName}, Event Date: ${eventDate}, Event Time: ${eventTime}`;\r\n            eventList.appendChild(listItem);\r\n        });\r\n    };\r\n\r\n    // Function to load the event list from localStorage\r\n    const loadEventList = () => {\r\n        const eventList = document.getElementById('eventList');\r\n        const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n\r\n        storedEvents.forEach((eventData) => {\r\n            const listItem = document.createElement('li');\r\n            listItem.textContent = `Event: ${eventData.eventName} | Date: ${eventData.eventDate} | Time: ${eventData.eventTime}`;\r\n            eventList.appendChild(listItem);\r\n        });\r\n    };\r\n\r\n    // Load the event list from localStorage when the page is loaded\r\n    loadEventList();\r\n\r\n    // Check the password and show the event form if the password is correct\r\n    passwordForm.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const password = event.target.password.value\r\n        const isCorrectPassword = checkPassword(password);\r\n\r\n        if (isCorrectPassword) {\r\n            showEventForm();\r\n        } else {\r\n            alert('Incorrect password');\r\n        }\r\n    });\r\n});\r\n"]}